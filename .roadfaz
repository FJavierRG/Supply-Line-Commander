# üîß PLAN DE MODULARIZACI√ìN: GameStateManager

**Archivo actual:** `server/game/GameStateManager.js` (1501 l√≠neas)  
**Objetivo:** Reducir a ~300 l√≠neas mediante extracci√≥n de managers especializados  
**Fecha:** 2024

---

## üìä AN√ÅLISIS DEL ARCHIVO ACTUAL

### Tama√±o
- **Total:** 1501 l√≠neas
- **M√©todo `update()`:** ~340 l√≠neas (22% del archivo)
- **Funciones de serializaci√≥n:** ~200 l√≠neas
- **Funciones de gesti√≥n:** ~500 l√≠neas

### Responsabilidades actuales (demasiadas)
1. ‚úÖ Gesti√≥n de helic√≥pteros
2. ‚úÖ Serializaci√≥n de estado
3. ‚úÖ Optimizaci√≥n de red
4. ‚úÖ Gesti√≥n de razas
5. ‚úÖ Movimiento de convoyes
6. ‚úÖ Consumo de supplies
7. ‚úÖ Sistema de inversiones
8. ‚úÖ C√°lculo de territorio
9. ‚úÖ Orquestaci√≥n de sistemas

---

## üéØ PLAN DE MODULARIZACI√ìN (5 FASES)

### **FASE 1: Extraer Managers Existentes** (Ya completado ‚úÖ)
- `BuildHandler` ‚Üí `server/game/handlers/BuildHandler.js`
- `ConvoyHandler` ‚Üí `server/game/handlers/ConvoyHandler.js`
- `CombatHandler` ‚Üí `server/game/handlers/CombatHandler.js`

---

### **FASE 2: Crear Managers Especializados**

#### **2.1 HelicopterManager**
**Archivo:** `server/game/managers/HelicopterManager.js`  
**Responsabilidad:** Creaci√≥n, actualizaci√≥n y llegadas de helic√≥pteros

```javascript
class HelicopterManager {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    createHelicopter(team, nodeId) {
        // L√≠nea 382 de GameStateManager
    }
    
    update(dt) {
        // L√≠nea 413 de GameStateManager
    }
    
    handleArrival(heli, toNode) {
        // L√≠nea 444 de GameStateManager
    }
}
```

**M√©todos a extraer:**
- `createHelicopter()` (l√≠nea 382)
- `updateHelicopters()` (l√≠nea 413)
- `handleHelicopterArrival()` (l√≠nea 444)

**Estimaci√≥n:** 150 l√≠neas

---

#### **2.2 StateSerializer**
**Archivo:** `server/game/managers/StateSerializer.js`  
**Responsabilidad:** Serializaci√≥n de estado para env√≠o a clientes

```javascript
class StateSerializer {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    serializeNodes() {
        // L√≠nea 593
    }
    
    serializeConvoys() {
        // L√≠nea 689
    }
    
    serializeHelicopters() {
        // L√≠nea 811
    }
    
    serializeAll() {
        // Combina todo
    }
}
```

**M√©todos a extraer:**
- `serializeNodes()` (l√≠nea 593)
- `hasNodeSignificantChanges()` (l√≠nea 531)
- `serializeConvoys()` (l√≠nea 689)
- `hasConvoySignificantChanges()` (l√≠nea 664)
- `serializeAllNodes()` (l√≠nea 717)
- `serializeAllConvoys()` (l√≠nea 785)
- `serializeHelicopters()` (l√≠nea 811)
- `serializeAllHelicopters()` (l√≠nea 828)

**Estimaci√≥n:** 250 l√≠neas

---

#### **2.3 OptimizationTracker**
**Archivo:** `server/game/managers/OptimizationTracker.js`  
**Responsabilidad:** Tracking de cambios para optimizaci√≥n de red

```javascript
class OptimizationTracker {
    constructor(gameState) {
        this.gameState = gameState;
        this.lastSentState = null;
        this.lastNodeStates = new Map();
        this.lastConvoyStates = new Map();
    }
    
    hasSignificantChanges(currentState) {
        // L√≠nea 1273
    }
    
    cleanupNodeTracking() {
        // L√≠nea 1250
    }
    
    cleanupConvoyTracking() {
        // L√≠nea 1260
    }
}
```

**M√©todos a extraer:**
- `hasNodeSignificantChanges()` (l√≠nea 531)
- `hasConvoySignificantChanges()` (l√≠nea 664)
- `hasSignificantChanges()` (l√≠nea 1273)
- `cleanupNodeTracking()` (l√≠nea 1250)
- `cleanupConvoyTracking()` (l√≠nea 1260)

**Estimaci√≥n:** 120 l√≠neas

---

#### **2.4 TerritoryCalculator**
**Archivo:** `server/game/managers/TerritoryCalculator.js`  
**Responsabilidad:** C√°lculos de territorio y fronteras

```javascript
class TerritoryCalculator {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    isInTeamTerritory(x, team) {
        // L√≠nea 1402
    }
}
```

**M√©todos a extraer:**
- `isInTeamTerritory()` (l√≠nea 1402)

**Estimaci√≥n:** 50 l√≠neas

---

### **FASE 3: Extraer L√≥gica de Raza**

#### **3.1 RaceManager**
**Archivo:** `server/game/managers/RaceManager.js`  
**Responsabilidad:** Gesti√≥n de razas y mec√°nicas especiales

```javascript
class RaceManager {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    getPlayerRaceConfig(team) {
        // L√≠nea 91
    }
    
    canPlayerUseFOBs(team) {
        // L√≠nea 101
    }
    
    getPlayerTransportSystem(team) {
        // L√≠nea 111
    }
    
    getValidRoutesForPlayer(fromType, team) {
        // L√≠nea 122
    }
    
    configureNodeForRace(node, team) {
        // L√≠nea 142
    }
    
    getInitialVehiclesForRace(team, nodeType) {
        // L√≠nea 166
    }
}
```

**M√©todos a extraer:**
- `getPlayerRaceConfig()` (l√≠nea 91)
- `canPlayerUseFOBs()` (l√≠nea 101)
- `getPlayerTransportSystem()` (l√≠nea 111)
- `getValidRoutesForPlayer()` (l√≠nea 122)
- `configureNodeForRace()` (l√≠nea 142)
- `getInitialVehiclesForRace()` (l√≠nea 166)
- `setPlayerRace()` (l√≠nea 218, 1496)
- `getPlayerRace()` (l√≠nea 233, 1487)

**Estimaci√≥n:** 200 l√≠neas

---

### **FASE 4: Simplificar m√©todo `update()`**

#### **4.1 ConvoyMovementManager**
**Archivo:** `server/game/managers/ConvoyMovementManager.js`  
**Responsabilidad:** Movimiento y llegadas de convoyes

```javascript
class ConvoyMovementManager {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    update(dt) {
        // L√≠neas 960-1105 (~145 l√≠neas)
        // - Actualizar progress
        // - Penalizaci√≥n por sabotaje
        // - Bonus de EngineerCenter
        // - Manejo de ambulancias
        // - Regreso a origen
    }
}
```

**M√©todos a extraer:**
- L√≥gica de actualizaci√≥n de convoyes (l√≠neas 960-1105)

**Estimaci√≥n:** 180 l√≠neas

---

#### **4.2 SupplyManager**
**Archivo:** `server/game/managers/SupplyManager.js`  
**Responsabilidad:** Consumo de supplies en frentes

```javascript
class SupplyManager {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    update(dt) {
        // L√≠neas 1107-1120
    }
}
```

**M√©todos a extraer:**
- Consumo de supplies en frentes (l√≠neas 1107-1120)

**Estimaci√≥n:** 30 l√≠neas

---

#### **4.3 InvestmentManager**
**Archivo:** `server/game/managers/InvestmentManager.js`  
**Responsabilidad:** Sistema de inversiones IntelRadio

```javascript
class InvestmentManager {
    constructor(gameState) {
        this.gameState = gameState;
    }
    
    update(dt) {
        // L√≠neas 1122-1140
    }
}
```

**M√©todos a extraer:**
- Sistema de inversi√≥n IntelRadio (l√≠neas 1122-1140)

**Estimaci√≥n:** 40 l√≠neas

---

### **FASE 5: Refactorizar GameStateManager**

#### **5.1 Estructura final**
```javascript
// GameStateManager.js (300 l√≠neas)
class GameStateManager {
    constructor(room) {
        this.room = room;
        this.nodes = [];
        this.convoys = [];
        this.currency = {...};
        this.playerRaces = {...};
        
        // Managers
        this.raceManager = new RaceManager(this);
        this.helicopterManager = new HelicopterManager(this);
        this.convoyMovementManager = new ConvoyMovementManager(this);
        this.supplyManager = new SupplyManager(this);
        this.investmentManager = new InvestmentManager(this);
        this.stateSerializer = new StateSerializer(this);
        this.optimizationTracker = new OptimizationTracker(this);
        this.territoryCalculator = new TerritoryCalculator(this);
        
        // Sistemas existentes
        this.medicalSystem = new MedicalSystemServer(this);
        this.frontMovement = new FrontMovementSystemServer(this);
        this.abandonmentSystem = new AbandonmentSystem(this);
        this.droneSystem = new DroneSystemServer(this);
        this.territory = new TerritorySystemServer(this);
        
        // Handlers
        this.buildHandler = new BuildHandler(this);
        this.convoyHandler = new ConvoyHandler(this);
        this.combatHandler = new CombatHandler(this);
        
        // Sistemas de actualizaci√≥n
        this.currencySystem = new CurrencySystem(this);
        this.constructionSystem = new ConstructionSystem(this);
        this.effectsSystem = new EffectsSystem(this);
    }
    
    update(dt) {
        // Countdown
        if (!this.gameStarted) {
            return this.handleCountdown(dt);
        }
        
        // Audio timers
        this.updateAudioTimers(dt);
        
        // Actualizar sistemas
        this.currencySystem.updateCurrency(dt);
        this.constructionSystem.updateConstructions(dt);
        this.convoyMovementManager.update(dt);
        this.supplyManager.update(dt);
        this.investmentManager.update(dt);
        this.abandonmentSystem.checkAbandonmentConditions();
        this.abandonmentSystem.update(dt);
        this.helicopterManager.update(dt);
        this.medicalSystem.update(dt);
        
        // Movimiento de frentes (puede retornar victoria)
        const victoryResult = this.frontMovement.update(dt);
        if (victoryResult) {
            return this.handleVictory(victoryResult);
        }
        
        // Sistema de territorio
        this.territory.update(dt);
        this.territory.updateAbandonmentProgress(dt);
        
        // Actualizar drones
        const droneResult = this.droneSystem.update(dt);
        this.handleDroneResult(droneResult);
        
        // Limpiar entidades destruidas
        this.cleanupDestroyedEntities();
        
        // Serializar y retornar estado
        return this.stateSerializer.serialize();
    }
    
    // M√©todos p√∫blicos delegados
    getPlayerRaceConfig(team) {
        return this.raceManager.getPlayerRaceConfig(team);
    }
    
    canPlayerUseFOBs(team) {
        return this.raceManager.canPlayerUseFOBs(team);
    }
    
    isInTeamTerritory(x, team) {
        return this.territoryCalculator.isInTeamTerritory(x, team);
    }
    
    // ... resto de m√©todos delegados
}
```

---

## üìÖ PLAN DE MIGRACI√ìN (4 SEMANAS)

### **Semana 1: Fases 1-2**
- [ ] Crear `HelicopterManager.js`
- [ ] Migrar c√≥digo de helic√≥pteros
- [ ] Crear `StateSerializer.js`
- [ ] Migrar c√≥digo de serializaci√≥n
- [ ] Crear `OptimizationTracker.js`
- [ ] Migrar c√≥digo de optimizaci√≥n
- [ ] Crear `TerritoryCalculator.js`
- [ ] Migrar c√≥digo de territorio
- [ ] **Tests:** Verificar que todo funciona igual

### **Semana 2: Fase 3**
- [ ] Crear `RaceManager.js`
- [ ] Migrar c√≥digo de razas
- [ ] Actualizar referencias en GameStateManager
- [ ] **Tests:** Verificar mec√°nicas de raza

### **Semana 3: Fase 4**
- [ ] Crear `ConvoyMovementManager.js`
- [ ] Migrar l√≥gica de convoyes del m√©todo `update()`
- [ ] Crear `SupplyManager.js`
- [ ] Migrar l√≥gica de supplies
- [ ] Crear `InvestmentManager.js`
- [ ] Migrar l√≥gica de inversiones
- [ ] **Tests:** Verificar movimientos y mec√°nicas

### **Semana 4: Fase 5**
- [ ] Refactorizar m√©todo `update()` en GameStateManager
- [ ] Simplificar GameStateManager (objetivo: 300 l√≠neas)
- [ ] Limpiar imports
- [ ] Documentar cada manager
- [ ] **Tests finales:** Partida completa end-to-end

---

## ‚úÖ RESULTADO FINAL

### **Estructura de archivos**
```
server/game/
‚îú‚îÄ‚îÄ GameStateManager.js          (300 l√≠neas - orquestador)
‚îú‚îÄ‚îÄ handlers/
‚îÇ   ‚îú‚îÄ‚îÄ BuildHandler.js          ‚úÖ (296 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ ConvoyHandler.js         ‚úÖ (369 l√≠neas)
‚îÇ   ‚îî‚îÄ‚îÄ CombatHandler.js         ‚úÖ (155 l√≠neas)
‚îú‚îÄ‚îÄ managers/
‚îÇ   ‚îú‚îÄ‚îÄ RaceManager.js           üÜï (200 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ HelicopterManager.js     üÜï (150 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ ConvoyMovementManager.js üÜï (180 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ SupplyManager.js         üÜï (30 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ InvestmentManager.js     üÜï (40 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ StateSerializer.js       üÜï (250 l√≠neas)
‚îÇ   ‚îú‚îÄ‚îÄ OptimizationTracker.js   üÜï (120 l√≠neas)
‚îÇ   ‚îî‚îÄ‚îÄ TerritoryCalculator.js   üÜï (50 l√≠neas)
‚îî‚îÄ‚îÄ systems/
    ‚îú‚îÄ‚îÄ CurrencySystem.js        ‚úÖ (51 l√≠neas)
    ‚îú‚îÄ‚îÄ ConstructionSystem.js    ‚úÖ (31 l√≠neas)
    ‚îî‚îÄ‚îÄ EffectsSystem.js         ‚úÖ (34 l√≠neas)
```

### **Ventajas**
1. ‚úÖ **Mantenibilidad:** Cada manager tiene una sola responsabilidad
2. ‚úÖ **Testabilidad:** F√°cil testear managers individualmente
3. ‚úÖ **Legibilidad:** GameStateManager queda como orquestador limpio
4. ‚úÖ **Escalabilidad:** F√°cil a√±adir nuevos managers sin tocar GameStateManager
5. ‚úÖ **Reutilizaci√≥n:** Managers pueden usarse en otros contextos

### **M√©tricas**
- **Antes:** 1 archivo de 1501 l√≠neas
- **Despu√©s:** 11 archivos especializados
  - GameStateManager: 300 l√≠neas (80% reducci√≥n)
  - Managers: ~1000 l√≠neas distribuidas en 8 archivos
  - Total: ~1300 l√≠neas (ligera reducci√≥n por eliminar duplicaci√≥n)

---

## üöÄ SIGUIENTE PASO

**¬øComenzamos con la Fase 1?**
