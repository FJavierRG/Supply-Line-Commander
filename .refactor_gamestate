═══════════════════════════════════════════════════════════════════════════════
  ROADMAP: REFACTORIZACIÓN DE GameStateManager.js
═══════════════════════════════════════════════════════════════════════════════

OBJETIVO:
  Dividir GameStateManager.js (972 líneas) en módulos pequeños, mantenibles
  y con responsabilidades claras. Separar CONFIGURACIÓN de LÓGICA.

PRIORIDAD: MEDIA (funciona, pero es inmantenible a largo plazo)

═══════════════════════════════════════════════════════════════════════════════
FASE 1: EXTRAER CONFIGURACIÓN
═══════════════════════════════════════════════════════════════════════════════

1.1 Crear: server/config/serverNodes.js
    ├─ Costos de edificios (fob: 130, truckFactory: 100, etc.)
    ├─ Tiempos de construcción (fob: 2s, antiDrone: 4.5s, etc.)
    ├─ Efectos de edificios (nuclearPlant: +2$/s, etc.)
    ├─ Capacidades de vehículos (heavy_truck: 15, etc.)
    └─ Validaciones (tipos válidos para drones, etc.)

1.2 Crear: server/config/gameConfig.js
    ├─ Tasas de generación de currency (base: 2$/s)
    ├─ Intervalos de sonido (clearShoots: 60s, radioEffect: 50s)
    ├─ Constantes de juego (countdown: 3s, duration: 520s)
    └─ Velocidades (convoy, drones, frentes)

1.3 Actualizar: server/game/GameStateManager.js
    ├─ Importar SERVER_NODE_CONFIG y GAME_CONFIG
    ├─ Reemplazar valores hardcodeados por referencias a config
    ├─ Eliminar tablas de costos duplicadas
    └─ Mantener funcionalidad 100% intacta

ESTADO: [✅] COMPLETADO (2025-10-17)

CAMBIOS REALIZADOS:
  ✅ server/config/serverNodes.js creado (102 líneas)
  ✅ server/config/gameConfig.js creado (61 líneas)
  ✅ GameStateManager.js actualizado:
     - Constructor: usa GAME_CONFIG (currency, duration, tickRate, countdown)
     - handleBuild(): usa SERVER_NODE_CONFIG.costs
     - applyBuildingEffects(): usa SERVER_NODE_CONFIG.effects
     - handleConvoy(): usa SERVER_NODE_CONFIG.vehicles y effects
     - handleAmbulance(): usa SERVER_NODE_CONFIG.ranges
     - handleSniperStrike(): usa SERVER_NODE_CONFIG.actions y temporaryEffects
     - handleDroneLaunch(): usa SERVER_NODE_CONFIG.actions
     - update(): usa GAME_CONFIG.audio y SERVER_NODE_CONFIG.effects

═══════════════════════════════════════════════════════════════════════════════
FASE 2: DIVIDIR HANDLERS EN MÓDULOS
═══════════════════════════════════════════════════════════════════════════════

2.1 Crear: server/game/handlers/BuildHandler.js
    ├─ handleBuild(playerTeam, buildingType, x, y)
    ├─ applyBuildingEffects(node)
    ├─ createNode() - Método auxiliar para crear nodos
    └─ 142 líneas

2.2 Crear: server/game/handlers/ConvoyHandler.js
    ├─ handleConvoy(playerTeam, fromId, toId)
    ├─ handleAmbulance(playerTeam, fromId, toId)
    └─ 179 líneas

2.3 Crear: server/game/handlers/CombatHandler.js
    ├─ handleSniperStrike(playerTeam, targetId)
    ├─ handleDroneLaunch(playerTeam, targetId)
    └─ 110 líneas

2.4 Actualizar: server/game/GameStateManager.js
    ├─ Importar los 3 handlers
    ├─ Instanciarlos en constructor
    ├─ Delegar métodos a handlers
    └─ Resultado: 972 → 672 líneas (-300 líneas, -31%)

ESTADO: [✅] COMPLETADO (2025-10-17)

CAMBIOS REALIZADOS:
  ✅ server/game/handlers/BuildHandler.js creado (142 líneas)
  ✅ server/game/handlers/ConvoyHandler.js creado (179 líneas)
  ✅ server/game/handlers/CombatHandler.js creado (110 líneas)
  ✅ GameStateManager.js refactorizado:
     - Imports añadidos para los 3 handlers
     - Handlers instanciados en constructor
     - handleBuild() → delegado a buildHandler
     - handleConvoy() → delegado a convoyHandler
     - handleAmbulance() → delegado a convoyHandler
     - handleSniperStrike() → delegado a combatHandler
     - handleDroneLaunch() → delegado a combatHandler
     - applyBuildingEffects() → delegado a buildHandler
     - REDUCCIÓN: 972 → 672 líneas (-31%)

═══════════════════════════════════════════════════════════════════════════════
FASE 3: EXTRAER LÓGICA DE ACTUALIZACIÓN
═══════════════════════════════════════════════════════════════════════════════

3.1 Crear: server/game/systems/CurrencySystem.js
    ├─ updateCurrency(dt)
    ├─ Generación pasiva (2$/s base)
    ├─ Bonus de plantas nucleares (+2$/s)
    └─ 50 líneas

3.2 Crear: server/game/systems/ConstructionSystem.js
    ├─ updateConstructions(dt)
    ├─ Actualizar timers de construcción
    ├─ Completar edificios
    └─ 28 líneas

3.3 Crear: server/game/systems/EffectsSystem.js
    ├─ updateEffects(dt)
    ├─ Expirar efectos temporales (wounded, etc.)
    └─ 32 líneas

3.4 Actualizar: server/game/GameStateManager.js
    ├─ Importar los 3 sistemas
    ├─ Instanciarlos en constructor
    ├─ Delegar update() a los sistemas
    └─ Resultado: 672 → 610 líneas (-62 líneas adicionales)

ESTADO: [✅] COMPLETADO (2025-10-17)

CAMBIOS REALIZADOS:
  ✅ server/game/systems/CurrencySystem.js creado (50 líneas)
  ✅ server/game/systems/ConstructionSystem.js creado (28 líneas)
  ✅ server/game/systems/EffectsSystem.js creado (32 líneas)
  ✅ GameStateManager.js refactorizado:
     - Imports añadidos para los 3 sistemas
     - Sistemas instanciados en constructor
     - update() delegado:
       * Currency → currencySystem.updateCurrency(dt)
       * Construcciones → constructionSystem.updateConstructions(dt)
       * Efectos temporales → effectsSystem.updateEffects(dt)
     - REDUCCIÓN ADICIONAL: 672 → 610 líneas (-9%)
     - REDUCCIÓN TOTAL: 972 → 610 líneas (-37%)

═══════════════════════════════════════════════════════════════════════════════
FASE 4: REORGANIZAR GameStateManager.js
═══════════════════════════════════════════════════════════════════════════════

ESTADO: [✅] COMPLETADO (integrado en Fases 1-3)

GameStateManager.js FINAL (610 líneas):
  ✅ Constructor (inicializar sistemas y handlers)
  ✅ getInitialState() - Generar mapa simétrico
  ✅ startGameLoop() / stopGameLoop()
  ✅ update(dt) - Orquesta TODOS los sistemas (delegación)
  ✅ getGameState() - Serialización
  ✅ Métodos auxiliares (createNode, isInTeamTerritory, etc.)

Importa:
  ✅ serverNodes.js (config)
  ✅ gameConfig.js (config)
  ✅ BuildHandler (handlers)
  ✅ ConvoyHandler (handlers)
  ✅ CombatHandler (handlers)
  ✅ CurrencySystem (systems)
  ✅ ConstructionSystem (systems)
  ✅ EffectsSystem (systems)

═══════════════════════════════════════════════════════════════════════════════
ESTRUCTURA FINAL IMPLEMENTADA
═══════════════════════════════════════════════════════════════════════════════

server/
  config/
    serverNodes.js         ✅ 99 líneas - Costos, efectos, rangos
    gameConfig.js          ✅ 61 líneas - Constantes globales
  
  game/
    GameStateManager.js    ✅ 610 líneas - Orquestación (antes: 972)
    
    handlers/
      BuildHandler.js      ✅ 142 líneas - Construcción + efectos
      ConvoyHandler.js     ✅ 179 líneas - Convoyes + ambulancias
      CombatHandler.js     ✅ 110 líneas - Sniper + drones
    
    systems/
      CurrencySystem.js        ✅ 50 líneas - Generación pasiva + bonus
      ConstructionSystem.js    ✅ 28 líneas - Timers de construcción
      EffectsSystem.js         ✅ 32 líneas - Efectos temporales
  
  systems/ (ya existían)
    FrontMovementSystemServer.js  ✅ 323 líneas
    MedicalSystemServer.js        ✅ 187 líneas
    TerritorySystemServer.js      ✅ 203 líneas
    DroneSystemServer.js          ✅ 255 líneas

REDUCCIÓN TOTAL: 972 → 610 líneas (-37%)

═══════════════════════════════════════════════════════════════════════════════
VENTAJAS DE LA REFACTORIZACIÓN
═══════════════════════════════════════════════════════════════════════════════

✅ BALANCEO:
   Cambiar costo de edificio: server/config/serverNodes.js (1 archivo)
   En lugar de: buscar en 972 líneas de GameStateManager.js

✅ DEBUGGING:
   Bug en construcción: server/game/handlers/BuildHandler.js (80 líneas)
   En lugar de: buscar en 972 líneas

✅ ESCALABILIDAD:
   Añadir nuevo edificio: Copiar-pegar sección en serverNodes.js
   En lugar de: modificar 3-4 lugares diferentes en GameStateManager.js

✅ COLABORACIÓN:
   Múltiples personas pueden trabajar en diferentes handlers sin conflictos

✅ TESTING:
   Testear BuildHandler independientemente del resto

═══════════════════════════════════════════════════════════════════════════════
RIESGOS
═══════════════════════════════════════════════════════════════════════════════

⚠️ RIESGO ALTO: Refactorizar código funcionando puede introducir bugs
⚠️ TIEMPO: 2-3 horas de trabajo + testing extensivo
⚠️ MULTIPLAYER: Si algo se rompe, afecta a TODOS los jugadores

MITIGACIÓN:
  1. Hacer commit ANTES de empezar
  2. Refactorizar en fases (config → handlers → systems)
  3. Testear después de CADA fase
  4. Tener plan de rollback listo

═══════════════════════════════════════════════════════════════════════════════
RESUMEN FINAL DE LA REFACTORIZACIÓN
═══════════════════════════════════════════════════════════════════════════════

OBJETIVO CUMPLIDO: ✅
  Dividir GameStateManager.js (972 líneas) en módulos manejables.

ARCHIVOS CREADOS: 8
  ✅ 2 archivos de configuración (160 líneas total)
  ✅ 3 handlers de acciones (431 líneas total)
  ✅ 3 sistemas de actualización (110 líneas total)

REDUCCIÓN TOTAL:
  Antes: 1 archivo de 972 líneas
  Ahora: 9 archivos (28-179 líneas cada uno)
  GameStateManager.js: 972 → 610 líneas (-37%)

BENEFICIOS LOGRADOS:
  ✅ Balanceo fácil: Editar server/config/serverNodes.js
  ✅ Código organizado: Cada archivo tiene una responsabilidad clara
  ✅ Mantenible: Archivos pequeños (28-179 líneas)
  ✅ Escalable: Añadir edificios es copiar-pegar en serverNodes.js
  ✅ Sin duplicación: Configuración centralizada

TESTING REQUERIDO:
  [ ] Testear multiplayer: construcción, convoyes, sniper, drones
  [ ] Verificar que todos los efectos funcionen (bonus de edificios)
  [ ] Probar expulsión de jugadores y sistema de ready
  [ ] Verificar chat del lobby

PRÓXIMOS PASOS SUGERIDOS:
  1. Testing exhaustivo del multiplayer
  2. Si todo funciona → Commit
  3. Si hay bugs → Hotfix y volver a testear

═══════════════════════════════════════════════════════════════════════════════
NOTAS
═══════════════════════════════════════════════════════════════════════════════

- GameStateManager funciona perfectamente ahora
- No hay urgencia en refactorizar
- Priorizar features de gameplay sobre arquitectura
- Refactorizar cuando haya ventana de tiempo segura
- SIEMPRE hacer backup/commit antes

═══════════════════════════════════════════════════════════════════════════════

